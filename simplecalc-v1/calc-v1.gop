import (
	"gop/scanner"
	"gop/token"
	"os"
)

func calc(expr string) string {
	var (
		ops  []token.Token
		vals []float64
	)
	prec := {
		token.ADD: 1,
		token.SUB: 1,
		token.MUL: 2,
		token.QUO: 2,
	}
	s := scanner.new(expr, nil, 0)
	n := 0 // op count
	for {
		pos, tok, lit := s.scan()
		switch tok {
		case token.INT, token.FLOAT:
			vals = append(vals, lit.float!)
		case token.ADD, token.SUB, token.MUL, token.QUO, token.SEMICOLON:
			for n > 0 && prec[ops[n-1]] >= prec[tok] {
				x := len(vals) - 1
				switch ops[n-1] {
				case token.ADD:
					vals[x-1] += vals[x]
				case token.SUB:
					vals[x-1] -= vals[x]
				case token.MUL:
					vals[x-1] *= vals[x]
				case token.QUO:
					vals[x-1] /= vals[x]
				}
				vals = vals[:x]
				n--
			}
			if tok == token.SEMICOLON {
				return vals[0].string
			}
			ops = append(ops[:n], tok)
			n++
		default:
			return "${pos}: invalid token ${tok}"
		}
	}
}

print "> "
for line <- lines(os.Stdin) {
	print "${calc(line)}\n> "
}
